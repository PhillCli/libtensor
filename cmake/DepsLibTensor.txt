#
#   Set up third-party dependencies for libtensor
#

include(CheckCXXSourceCompiles)

#   Detect whether the system is POSIX-compliant
#
if(UNIX)
    add_definitions(-DPOSIX)
endif(UNIX)

#   Test drand48
#
check_cxx_source_compiles("
#include<cstdlib>
int main() {
  double d = drand48();
  return 0;
}
" HAVE_DRAND48)
if(HAVE_DRAND48)
    add_definitions(-DHAVE_DRAND48)
endif(HAVE_DRAND48)

#   Detect the linear algebra library
#
if(WITH_BLAS STREQUAL "mkl")
    set(CMAKE_MODULE_PATH_SAVED ${CMAKE_MODULE_PATH})
    set(CMAKE_MODULE_PATH ${LIBTENSOR_DIR}/cmake)
    find_package(MKL)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_SAVED})
    if(NOT MKL_FOUND)
        message(FATAL_ERROR "Intel MKL library not found")
    endif(NOT MKL_FOUND)
    set(BLAS_LAPACK_INCLUDE ${MKL_INCLUDE_PATH})
    set(BLAS_LAPACK_LINKER_FLAGS "")
    set(BLAS_LAPACK_LIBRARIES ${MKL_LIBRARIES})
elseif(WITH_BLAS STREQUAL "acml")
    set(CMAKE_MODULE_PATH_SAVED ${CMAKE_MODULE_PATH})
    set(CMAKE_MODULE_PATH ${LIBTENSOR_DIR}/cmake)
    find_package(ACML)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_SAVED})
    if(NOT ACML_FOUND)
        message(FATAL_ERROR "ACML library not found")
    endif(NOT ACML_FOUND)
    set(BLAS_LAPACK_INCLUDE ${ACML_INCLUDE_PATH})
    set(BLAS_LAPACK_LINKER_FLAGS "")
    set(BLAS_LAPACK_LIBRARIES "${ACML_LIBRARIES}")
elseif(WITH_BLAS STREQUAL "essl")
    set(CMAKE_MODULE_PATH_SAVED ${CMAKE_MODULE_PATH})
    set(CMAKE_MODULE_PATH ${LIBTENSOR_DIR}/cmake)
    find_package(ESSL)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_SAVED})
    if(NOT ESSL_FOUND)
        message(FATAL_ERROR "ESSL not found")
    endif(NOT ESSL_FOUND)
    set(BLAS_LAPACK_INCLUDE "")
    set(BLAS_LAPACK_LINKER_FLAGS "")
    set(BLAS_LAPACK_LIBRARIES "${ESSL_LIBRARIES}")
elseif(WITH_BLAS STREQUAL "atlas")
    set(CMAKE_MODULE_PATH_SAVED ${CMAKE_MODULE_PATH})
    set(CMAKE_MODULE_PATH ${LIBTENSOR_DIR}/cmake)
    find_package(ATLAS)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_SAVED})
    if(NOT ATLAS_FOUND)
        message(FATAL_ERROR "ATLAS library not found")
    endif(NOT ATLAS_FOUND)
    set(BLAS_LAPACK_INCLUDE "")
    set(BLAS_LAPACK_LINKER_FLAGS "")
    set(BLAS_LAPACK_LIBRARIES "${ATLAS_LIBRARIES}")
elseif(WITH_BLAS STREQUAL "openblas")
    set(CMAKE_MODULE_PATH_SAVED ${CMAKE_MODULE_PATH})
    set(CMAKE_MODULE_PATH ${LIBTENSOR_DIR}/cmake)
    find_package(OpenBLAS)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_SAVED})
    if(NOT OPENBLAS_FOUND)
        message(FATAL_ERROR "OpenBLAS library not found")
    endif(NOT OPENBLAS_FOUND)
    set(BLAS_LAPACK_INCLUDE ${OPENBLAS_INCLUDE_PATH})
    set(BLAS_LAPACK_LINKER_FLAGS "")
    set(BLAS_LAPACK_LIBRARIES ${OPENBLAS_LIBRARIES})
else()
    find_package(LAPACK REQUIRED)
    set(BLAS_LAPACK_INCLUDE "")
    set(BLAS_LAPACK_LINKER_FLAGS ${LAPACK_LINKER_FLAGS})
    set(BLAS_LAPACK_LIBRARIES ${LAPACK_LIBRARIES})
endif()

#   Find OpenMP settings
#
if(WITH_OPENMP)
    find_package(OpenMP REQUIRED)
endif(WITH_OPENMP)

#   Find MPI library
#
find_package(MPI)
if(MPI_CXX_FOUND)
    include_directories(${MPI_CXX_INCLUDE_PATH})
elseif(MPI_FOUND)
    include_directories(${MPI_INCLUDE_PATH})
endif(MPI_CXX_FOUND)

#   Find CTF library (only with MPI)
#
if(MPI_FOUND)
    set(CMAKE_MODULE_PATH_SAVED ${CMAKE_MODULE_PATH})
    set(CMAKE_MODULE_PATH ${LIBTENSOR_DIR}/cmake)
    find_package(CTF)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_SAVED})
    if(CTF_FOUND)
        set(WITH_CTF TRUE)
        include_directories(${CTF_INCLUDE_PATH})
        set(LIBTENSOR_DEP_LIBS ${LIBTENSOR_DEP_LIBS} ctf)
    else(CTF_FOUND)
        message(STATUS
            "Did not find CTF, distributed tensors will not be built")
    endif(CTF_FOUND)
endif(MPI_FOUND)

if(ARMADILLO_PATH)
    find_package(Armadillo CONFIG PATHS "${ARMADILLO_PATH}" "${ARMADILLO_PATH}/usr" "${ARMADILLO_PATH}/usr/local" NO_DEFAULT_PATH)
else(ARMADILLO_PATH)
    find_package(Armadillo)
endif(ARMADILLO_PATH)
if(Armadillo_FOUND)
    message(STATUS "Using Armadillo ${Armadillo_VERSION}")
    set(WITH_ARMADILLO TRUE)
endif(Armadillo_FOUND)

set(CMAKE_PREFIX_PATH ${SAVED_CMAKE_PREFIX_PATH})
unset(SAVED_CMAKE_PREFIX_PATH)

#   Libtensor dependencies (libraries)
#
include_directories(${BLAS_LAPACK_INCLUDE})
set(LIBTENSOR_DEP_LIBS ${LIBTENSOR_DEP_LIBS}
    ${MPI_LIBRARIES} ${BLAS_LAPACK_LIBRARIES})

